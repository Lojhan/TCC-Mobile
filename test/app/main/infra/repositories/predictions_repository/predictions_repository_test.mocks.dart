// Mocks generated by Mockito 5.3.0 from annotations
// in mobile/test/app/infra/repositories/predictions_repository/predictions_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mobile/app/main/domain/entities/prediction.dart' as _i5;
import 'package:mobile/app/main/external/datasources/prediction_remote_datasource.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PredictionRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPredictionRemoteDatasource extends _i1.Mock
    implements _i3.PredictionRemoteDatasource {
  MockPredictionRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dioInstance =>
      (super.noSuchMethod(Invocation.getter(#dioInstance),
              returnValue: _FakeDio_0(this, Invocation.getter(#dioInstance)))
          as _i2.Dio);
  @override
  set dioInstance(_i2.Dio? _dioInstance) =>
      super.noSuchMethod(Invocation.setter(#dioInstance, _dioInstance),
          returnValueForMissingStub: null);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i5.Prediction?> getById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getById, [id]),
              returnValue: _i4.Future<_i5.Prediction?>.value())
          as _i4.Future<_i5.Prediction?>);
  @override
  _i4.Future<List<_i5.Prediction>?> list() =>
      (super.noSuchMethod(Invocation.method(#list, []),
              returnValue: _i4.Future<List<_i5.Prediction>?>.value())
          as _i4.Future<List<_i5.Prediction>?>);
  @override
  _i4.Future<_i5.Prediction?> save(_i5.Prediction? model) =>
      (super.noSuchMethod(Invocation.method(#save, [model]),
              returnValue: _i4.Future<_i5.Prediction?>.value())
          as _i4.Future<_i5.Prediction?>);
  @override
  _i4.Future<_i5.Prediction?> update(_i5.Prediction? model) =>
      (super.noSuchMethod(Invocation.method(#update, [model]),
              returnValue: _i4.Future<_i5.Prediction?>.value())
          as _i4.Future<_i5.Prediction?>);
  @override
  _i4.Future<_i5.Prediction?> delete(String? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
              returnValue: _i4.Future<_i5.Prediction?>.value())
          as _i4.Future<_i5.Prediction?>);
}
